#+TITLE: Emacs configuration
#+AUTHOR: Raffael Affolter

* diminish

I don't want that every minor mode is cluttering my modeline

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

* EXWM

#+BEGIN_SRC emacs-lisp
(use-package exwm
  :ensure t
  :defer t
  :config
  (require 'exwm-config)
  (require 'exwm-systemtray)
  (exwm-config-misc)
  (setq exwm-workspace-number 4)
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 15)
  (setq exwm-input-global-keys
        `(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
                      (interactive)
                      (start-process "" nil "/usr/bin/slock")))
          ([?\s-p] . helm-run-external-command)
          ([?\s-:] . evil-ex))))
#+END_SRC

* desktop-environment

#+BEGIN_SRC emacs-lisp
(use-package desktop-environment
  :ensure t
  :diminish desktop-environment-mode
  :config (desktop-environment-mode))
#+END_SRC

* auto-package-update

we want to auto update our packages

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))

#+END_SRC

* Default settings

** UTF-8 Please

#+BEGIN_SRC emacs-lisp
(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)   ; pretty
(set-terminal-coding-system  'utf-8)   ; pretty
(set-keyboard-coding-system  'utf-8)   ; pretty
(set-selection-coding-system 'utf-8)   ; please
(prefer-coding-system        'utf-8)   ; with sugar on top
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

** Garbage collection allow more than 20MB

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** No backup files

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Auto-Save in /tmp

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Always follow symlinks

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Confirm before closing Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Ask y/n instead of yes/no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Auto revert files on change

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC


** Shortcut for changing font size

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-1") 'text-scale-increase)
(define-key global-map (kbd "C-0") 'text-scale-decrease)
#+END_SRC

** Disable startup message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC

** No GUI toolbar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC

** Automatic line Breaks

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'auto-fill-mode)
(diminish 'auto-fill-function)
#+END_SRC

** Enable Narrow to region

#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC

** We dont need scroll bars

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Remeber cursor position when reopening files

#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
#+END_SRC

** no bell

#+BEGIN_SRC emacs-lisp

  (setq visible-bell t)

#+END_SRC

** auto completion

#+BEGIN_SRC emacs-lisp

  (use-package company
    :ensure t
    :defer t
    :diminish company-mode
    :init
    (global-company-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp

  ;(use-package company-quickhelp
   ; :ensure t
   ; :diminish company-quickhelp-mode
   ; :config
   ; (company-quickhelp-mode)
  ;)
#+END_SRC


** default font

#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(font . "Hack-11"))

  (when (member "Hack" (font-family-list))
    (set-face-attribute 'default nil :font "Hack" :height 110))
#+END_SRC

** winner mode

Allows to ‘undo’ (and ‘redo’) changes in the window configuration with
the key commands ‘C-c left’ and ‘C-c right’.

#+BEGIN_SRC emacs-lisp

  (when (fboundp 'winner-mode)
    (winner-mode 1))

#+END_SRC

** Start in full screen

I want that emacs opens in fullscreen
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;;(custom-set-variables
   ;;'(initial-frame-alist (quote ((fullscreen . maximized)))))
#+End_SRC


** Client settings

Change how you kill buffers if you open emacs as client
#+BEGIN_SRC emacs-lisp
(add-hook 'server-switch-hook
          (lambda ()
            (when (current-local-map)
              (use-local-map (copy-keymap (current-local-map))))
            (when server-buffer-clients
              (local-set-key (kbd "C-x k") 'server-edit))))
#+END_SRC

** Emacs daemon settings
This function helps to shut down the emacs server and save any
modified buffers

#+BEGIN_SRC emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))
#+END_SRC


* Evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (global-set-key (kbd "M-x")'execute-extended-command)
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))


(use-package evil-leader
  :after evil
  :ensure t
  :init (global-evil-leader-mode)
  :config
  (progn
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "w" 'basic-save-buffer
      "s" 'flyspell-buffer
      "b" 'evil-buffer
      "q" 'evil-quit)))

;; don't show name in modeline
(diminish 'undo-tree-mode)

(use-package pdf-tools
  :ensure t
  :config
  (evil-set-initial-state 'pdf-view-mode 'emacs)
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'pdf-view-mode-hook (lambda () (linum-mode -1)))
  (pdf-tools-install))


;;(setq TeX-view-program-selection '((output-pdf "pdf-tools"))
 ;;       TeX-view-program-list  '(("PDF Tools" TeX-pdf-tools-sync-view))
  ;;      TeX-source-correlate-start-server t)

(use-package evil-smartparens
  :ensure t
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :config
  (projectile-global-mode))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (require 'helm-config)
  :config
  (helm-mode 1)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
  (define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level))
#+END_SRC

** Helm projectile

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind (("C-S-P" . helm-projectile-switch-project)
         :map evil-normal-state-map
         ("C-p" . helm-projectile))
  :ensure t
  :config
  (evil-leader/set-key
    "ps" 'helm-projectile-ag
    "pa" 'helm-projectile-find-file-in-known-projects))
#+END_SRC

* Which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config (which-key-mode) )
#+END_SRC

* Theming

** Theme to load
*** solarized

#+BEGIN_SRC emacs-lisp
;;  (use-package solarized-theme
;;    :ensure t
;;    :defer t
   ; :init (load-theme 'solarized-dark t)
;;    )
#+END_SRC

*** zenburn

#+BEGIN_SRC emacs-lisp
;;(use-package zenburn-theme
;;  :ensure t)

#+END_SRC

*** material

#+BEGIN_SRC emacs-lisp

;  (use-package material-theme
;    :ensure t)

#+END_SRC


*** tangotango

#+BEGIN_SRC emacs-lisp

;  (use-package tangotango-theme
;    :ensure t)

#+END_SRC

*** darcula

#+BEGIN_SRC emacs-lisp

;;  (use-package darcula-theme
;;    :ensure t)

#+END_SRC

*** ample

#+BEGIN_SRC emacs-lisp

;;(use-package ample-theme
;;  :defer t
;;  :ensure t)
#+END_SRC


*** sanityinc-tomorrow
#+BEGIN_SRC emacs-lisp
;;(use-package  color-theme-sanityinc-tomorrow
;;  :ensure t
;;  :defer t)
#+END_SRC
*** gruvbox
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t)
#+END_SRC

*** leuven
#+begin_src emacs-lisp
(use-package leuven-theme
  :ensure t)
#+end_src

*** load theme
#+BEGIN_SRC emacs-lisp

;;(use-package color-theme :ensure t)
;;(load-theme 'gruvbox-light-hard t)
(load-theme 'leuven t)

;;(load-theme 'sanityinc-tomorrow-eighties t)
#+END_SRC
** Powerline

#+BEGIN_SRC emacs-lisp

  (use-package powerline
    :ensure t
    :config (powerline-default-theme ))

#+END_SRC

** Airline Themes

#+BEGIN_SRC emacs-lisp
(use-package airline-themes
  :ensure t
  :init
  (setq powerline-utf-8-separator-left        #xe0b0
        powerline-utf-8-separator-right       #xe0b2
        airline-utf-glyph-separator-left      #xe0b0
        airline-utf-glyph-separator-right     #xe0b2
        airline-utf-glyph-subseparator-left   #xe0b1
        airline-utf-glyph-subseparator-right  #xe0b3
        airline-utf-glyph-branch              #xe0a0
        airline-utf-glyph-readonly            #xe0a2
        airline-utf-glyph-linenumber          #xe0a1)
  :config
  ;;(load-theme 'airline-solarized-gui t)
  ;;(load-theme 'airline-wombat t)
  ;;(load-theme 'airline-gruvbox-dark t)
  (load-theme 'airline-sol t)
  )
#+END_SRC



** Custom function for dark and light themes

Since i like to switch between the solarized/tango light and dark theme i
made this little toggle function which loads the solarized/tango theme and
then also loads the airline theme again so the modeline is not messed
up :-)

#+BEGIN_SRC emacs-lisp
(setq light-theme 'leuven)
(setq dark-theme 'leuven-dark)

(setq active-theme light-theme)

(defun toggle-light-theme ()
  (interactive)
  (if (eq active-theme dark-theme)
      (setq active-theme light-theme)
    (setq active-theme dark-theme))
  (load-theme active-theme t)
  (load-theme 'airline-sol t))

;;(toggle-light-theme)

(global-set-key (kbd "<f6>") 'toggle-light-theme)
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda ()
                                (get-buffer "*dashboard*"))))
#+END_SRC

* Plantuml

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :ensure t
  :config (progn
            (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
            (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))))

#+END_SRC

* mu4e

#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

;(setq auth-sources '("~/.authinfo.gpg"))

(use-package mu4e
  :commands mu4e
  :config
  (setq mu4e-maildir "~/maildir")
  (setq mu4e-get-mail-command "/home/raffael/.local/bin/run-getmail.sh")
  (setq mu4e-update-interval 1200)
  (setq mu4e-attachement-dir "~/Downloads")
  (setq user-full-name "Raffael Affolter")
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-view-show-adresses t)
  (setq mu4e-view-show-images t)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-signature t my-signature-file "~/.signature")
  (setq mu4e-compose-dont-reply-to-self t)
  ;;because we have problem with some mails
  (setq shr-color-visible-luminance-min 60)
  (setq shr-color-visible-distance-min 5)
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  ;(add-to-list 'mu4e-user-mail-address-list "raffael.affolter@protonmail.ch")
  ;(add-to-list 'mu4e-user-mail-address-list "raffael.affolter@protonmail.com")
  ;(add-to-list 'mu4e-user-mail-address-list "raffael.affolter@pm.me")
  ;(add-to-list 'mu4e-user-mail-address-list "affolraf@students.zhaw.ch")
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "PROTONMAIL"
            :enter-func (lambda() (mu4e-message "Switch to Protonmail"))
            :match-func (lambda(msg)
                          (when msg
                            (s-prefix? "/Protonmail/" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "raffael.affolter@protonmail.ch")
                    (mu4e-sent-folder . "/Protonmail/Sent")
                    (mu4e-drafts-folder . "/Protonmail/Drafts-local")
                    (mu4e-trash-folder . "/Protonmail/Trash")
                    (smtpmail-default-smtp-server . "127.0.0.1")
                    (smtpmail-smtp-server . "127.0.0.1")
                    (smtpmail-local-domain . "127.0.0.1")
                    (smtpmail-smtp-user . "raffael.affolter@protonmail.ch")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 1025)))

          ,(make-mu4e-context
            :name "ZHAW"
            :enter-func (lambda() (mu4e-message "Switch to ZHAW"))
            :match-func (lambda(msg)
                          (when msg
                            (s-prefix? "/ZHAW/" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "affolraf@students.zhaw.ch")
                    (mu4e-sent-folder . "/ZHAW/Sent")
                    (mu4e-drafts-folder . "/ZHAW/Drafts")
                    (mu4e-trash-folder . "/ZHAW/Trash")
                    (smtpmail-default-smtp-server . "smtp.office365.com")
                    (smtpmail-smtp-server . "smtp.office365.com")
                    (smtpmail-local-domain . "office365.com")
                    (smtpmail-smtp-user . "affolraf@students.zhaw.ch")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)))
          ,(make-mu4e-context
            :name "Outlook"
            :enter-func (lambda() (mu4e-message "Switch to Outlook"))
            :match-func (lambda(msg)
                          (when msg
                            (s-prefix? "/Outlook/" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "raffael.affolter@outlook.com")
                    (mu4e-sent-folder . "/Outlook/Sent")
                    (mu4e-drafts-folder . "/Outlook/Drafts")
                    (mu4e-trash-folder . "/Outlook/Trash")
                    (smtpmail-default-smtp-server . "smtp.office365.com")
                    (smtpmail-smtp-server . "smtp.office365.com")
                    (smtpmail-local-domain . "outlook.com")
                    (smtpmail-smtp-user . "raffael.affolter@outlook.com")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)
                    (mu4e-sent-messages-behavior . delete)
                    (mu4e-sent-messages-behavior . delete)))
          ,(make-mu4e-context
            :name "UZH"
            :enter-func (lambda() (mu4e-message "Switch to UZH"))
            :match-func (lambda(msg)
                          (when msg
                            (s-prefix? "/UZH/" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "raffael.affolter@uzh.ch")
                    (mu4e-sent-folder . "/UZH/Gesendet")
                    (mu4e-drafts-folder . "/UZH/Drafts")
                    (mu4e-trash-folder . "/UZH/Trash")
                    (smtpmail-default-smtp-server . "smtp.uzh.ch")
                    (smtpmail-smtp-server . "smtp.uzh.ch")
                    (smtpmail-local-domain . "uzh.ch")
                    (smtpmail-smtp-user . "raffael.affolter@uzh.ch")
                    (smtpmail-stream-type . starttls)
                    (smtpmail-smtp-service . 587)))))

  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda() (ispell-change-dictionary "de_CH"))))
#+END_SRC

* flyspell
we want flyspell to be enabled by default in text org and latex files

#+BEGIN_SRC emacs-lisp
(setq ispell-list-command "--list")
(setq ispell-dictionary "de_CH")
(add-hook 'text-mode-hook 'flyspell-mode)
(diminish 'flyspell-mode)
#+END_SRC

also easy swich between english and german

#+BEGIN_SRC emacs-lisp
(defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "de_CH") "english" "de_CH")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode
  :ensure t)
#+END_SRC

* Px
#+BEGIN_SRC emacs-lisp
(use-package px
  :ensure t)
#+END_SRC
* Latex

#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t)

#+END_SRC

* Programming settings
** Defaults

Line numbers

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC

Tabs

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

Use 2 spaces instead of tab.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2 indent-tabs-mode nil)
#+END_SRC

intendation cannot insert tabs

#+BEGIN_SRC emacs-lisp
(setq-default inent-tabs-mode nil)
#+END_SRC

Two spaces for programming languages

#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
(setq js-indent-level 2)
#+END_SRC

auto indent with return key

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

No trailing white spaces except in makrdowns

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook
          '(lambda()
             (when (not (derived-mode-p 'markdown-mode))
               (delete-trailing-whitespace))))

#+END_SRC

highlight fixme todo and bug statement

#+BEGIN_SRC emacs-lisp
(use-package fixme-mode
  :ensure t
  :config (fixme-mode nil))
#+END_SRC

highlight all characters which are over the column 80

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
(setq whitespace-line-column 100)
(setq whitespace-style '(face lines-tail))

(add-hook 'prog-mode-hook 'whitespace-mode)
(diminish 'whitespace-mode)
#+END_SRC

Use python3 as default
#+BEGIN_SRC  emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

diminish eldoc-mode

#+BEGIN_SRC emacs-lisp
(diminish 'eldoc-mode)
#+END_SRC

** realgud

#+BEGIN_SRC  emacs-lisp
(use-package realgud
  :ensure t
  :defer t)
#+END_SRC

** Paredit

#+BEGIN_SRC emacs-lisp
;;(use-package paredit
;;  :ensure t
;;  :diminish paredit-mode
;;  :config
;;  (autoload 'enable-paredit-mode "paredit"
;;    "Turn on pseudo-structural editing of Lisp code." t)
;;  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
;;  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
;;  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
;;  ;(add-hook 'helm-mode-hook 'enable-paredit-mode)
;;  (add-hook 'json-mode-hook 'enable-paredit-mode)
;;  (add-hook 'scheme-mode-hook 'enable-paredit-mode)
;;  (add-hook 'geiser-repl-mode-hook 'enable-paredit-mode)
;;  (add-hook 'slime-repl-mode-hook 'enable-paredit-mode)
;;  (add-hook 'hy-mode-hook 'enable-paredit-mode
;; ;; (add-hook 'clojure-mode-hook 'enable-paredit-mode)
;;;;  (add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
;;)
;;)

#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :hook ((lisp-mode
            emacs-lisp-mode
            json-mode scheme-mode
            geiser-repl-mode
            slime-repl-mode
            hy-mode clojure-mode
            cider-repl-mode
            haskell-mode
            haskell-interactive-mode
            ess-mode
            ein:ipynb-mode) . smartparens-strict-mode)
    :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings))
#+END_SRC

** LISP settings

#+BEGIN_SRC emacs-lisp


#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)

(use-package clojure-mode-extra-font-locking
  :ensure t)
#+END_SRC

** Cider

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :diminish cider-mode
  :config
  (add-hook 'cider-mode-hook #'eldoc-mode))

(setq cider-cljs-lein-repl
      "(do (require 'figwheel-sidecar.repl-api)
           (figwheel-sidecar.repl-api/start-figwheel!)
           (figwheel-sidecar.repl-api/cljs-repl))")
#+END_SRC

** SLIME

#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :config (progn (setq inferior-lisp-program "/usr/bin/clisp")
                 (setq slime-contribs '(slime-fancy))))

#+END_SRC

** Geiser

We want a good racket workspace

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :ensure t
  :config
  (setq geiser-active-implementations '(racket)))
#+END_SRC

** Hy
#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :ensure t)
#+END_SRC
** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config (global-set-key (kbd "C-x g") 'magit-status))

#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :init (global-flycheck-mode))
#+END_SRC


** Rainboooows

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)

#+END_SRC

** ESS
we use ESS for R
#+BEGIN_SRC emacs-lisp
(use-package ess
  :ensure t)
#+END_SRC

** Jupyter support

#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  :defer t)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (custom-set-variables '(haskell-process-type 'ghci))
  (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile)
  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
  (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal))
#+END_SRC


** Gnuplot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :ensure t)
#+END_SRC

* Org-Mode Settings
** org easy templates
This section maybe gets removed but i lost the org easy templates

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** configure latex compiler
#+BEGIN_SRC emacs-lisp
;;  (setq org-latex-compiler "xelatex")
#+END_SRC

** configure pdflatex
#+BEGIN_SRC emacs-lisp
;;  (setq org-latex-pdf-process
;;       '("xelatex -interaction nonstopmode %f"
;;         "bibtex %b"
;;         "xelatex -interaction nonstopmode %f"
;;         "xelatex -interaction nonstopmode %f"
;;         "xelatex -interaction nonstopmode %f"
;;))

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bib2gls --group %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** Enable native intendations in sourc blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-fontify-whole-heading-line t)
#+END_SRC

** KOMA-SCRIPT
we want koma script

#+BEGIN_SRC emacs-lisp

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("koma-article" "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (with-eval-after-load "ox-latex"

    (add-to-list 'org-latex-classes
                 '("koma-letter"
                   "\\documentclass[11pt]{scrlttr2}"
                   "\\usepackage[utf8]{inputenc}"
                   "\\usepackage[T1]{fontenc}"
                   "\\usepackage{xcolor}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+END_SRC

** eurpecv-class

#+BEGIN_SRC emacs-lisp

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("europecv" "\\documentclass[utf8,a4Paper, 10pt, helvetica,narrow,flagWB, booktabs,totpages,german]{europevc}")))

#+END_SRC

* ACMART

#+begin_src emacs-lisp
(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-classes
               '("acmart" "\\documentclass{acmart}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** org latex settings

I want to use minted to highlight my code.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+END_SRC

** Plain lists

#+BEGIN_SRC emacs-lisp

  (setq org-list-allow-alphabetical t)

#+END_SRC

** where is my agenda

#+BEGIN_SRC emacs-lisp

  (setq org-agenda-files '("~/Dokumente/org-documents/agenda.org"))

#+END_SRC

** Bibtex settings

#+BEGIN_SRC emacs-lisp
(setq my-bibtex-dir "~/bibliography/"
      my-bibtex-pdf-dir (concat my-bibtex-dir "bibtex-pdfs/")
      my-default-bibfile (list  (concat my-bibtex-dir "default-bibliography.bib"))
      my-default-bibnotes my-bibtex-dir)
#+END_SRC

Definitions for automatically generating a bibtex key from a bibtex
entry. Look at help:bibtex-generate-autokey to understand the settings
#+BEGIN_SRC emacs-lisp
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
#+END_SRC

** org capture templates
#+BEGIN_SRC emacs-lisp
(defun name-blog-file ()
  (interactive)
  (let ((name (read-string "Name: ")))
    (expand-file-name (format "%s/%s-%s.org"
                              (format-time-string "%Y")
                              (format-time-string "%Y-%m-%d")
                              name) "~/git/cerealbuster.gitlab.io/org/posts/")))

(setq org-capture-templates
      '(("t" "Task" entry (file+headline "" "Tasks")
         "* TODO %?\n  %u\n  %a")
        ("b" "New blog entry" plain (file name-blog-file)
         (file "~/git/cerealbuster.gitlab.io/templates/blog-capture.org"))))
#+END_SRC

** Org-Ref

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t
  :commands org-ref-bibtex-hydra/body
  :config
  (setq org-ref-notes-directory my-bibtex-dir
        org-ref-default-bibliography my-default-bibfile
        org-ref-bibliography-notes my-default-bibnotes
        org-ref-pdf-directory my-bibtex-pdf-dir)
  (setq org-ref-notes-function
        (lambda (thekey)
          (let ((bibtex-completion-bibliography
                 (org-ref-find-bibliography)))
            (bibtex-completion-edit-notes
             (list
              (car (org-ref-get-bibtex-key-and-file thekey))))))))
#+END_SRC

** Org-noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :ensure t
  :config
  (setq org-noter-notes-search-path (list my-default-bibnotes))
  :bind ("C-c i" . 'org-noter-insert-note))
#+END_SRC

** helm bibtex
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :ensure t
  :commands helm-bibtex
  :config
  (setq helm-bibtex-bibliography my-default-bibfile ;; where your references are stored
        helm-bibtex-library-path my-bibtex-pdf-dir ;; where your pdfs etc are stored
        bibtex-completion-bibliography my-default-bibfile
        bibtex-completion-notes-path my-default-bibnotes
        ;; name of note-file will be {pdffile} + extension
        bibtex-completion-notes-extension ".org"
        bibtex-completion-notes-template-multiple-files
        (format
         "#+TITLE: Notes on ${=key=}: ${title}\n#+INTERLEAVE_PDF: %s${=key=}.pdf\n\n"
         my-bibtex-pdf-dir)       ;; header to be used in the associated notes files
        bibtex-completion-additional-search-fields '(keywords)))
#+END_SRC

** Org bullets makes things look pretty

#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "chromium-browser")
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Subfigures
   #+begin_src emacs-lisp
(use-package ox-latex-subfigure
  :ensure t)
   #+end_src

** Org mu4e

#+BEGIN_SRC emacs-lisp

  (use-package org-mu4e)

#+END_SRC

** enable Markdown export

#+BEGIN_SRC emacs-lisp

  (with-eval-after-load 'org
    (require 'ox-md nil t))

#+END_SRC

** Org-Journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :defer t
    :ensure t
    :init
    (setq org-journal-dir "~/Dokumente/org-documents/journals")
    (setq org-journal-file-format "%d-%m-%Y.org"))
#+END_SRC

** Org-Projects
here are my project settings
#+BEGIN_SRC emacs-lisp
;(add-to-list 'org-export-options-alist '(:page-type "PAGE_TYPE" "default" nil parse))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my/sitemap-fn (title list)
  "Generate the sitemap (Blog Main Page)"
  (concat "#+TITLE: " title "\n\n"
          (string-join (mapcar #'car (cdr list)) "\n\n")))

(defun my/sitemap-entry (entry style project)
  "I create a custom sitemap entry"
  (format (string-join
           '("[[file:%s][%s]]"
             "#+BEGIN_published"
             "%s"
             "#+END_published"
             )"\n")
          entry
          (org-publish-find-title entry project)
          (format-time-string "%d-%m-%Y" (org-publish-find-date entry project))))

(setq org-publish-project-alist

        '(("static-sites"
           :base-directory "~/git/cerealbuster.gitlab.io/org/"
           :base-extension "org"
           :publishing-directory "~/git/cerealbuster.gitlab.io/"
           :publishing-function org-html-publish-to-html
           :recursive t
           :exclude "posts/"
           :headline-levels 4
           :section-numbers nil
           :auto-preamble t
           :html-link-home "index.html"
           :html-link-up "index.html"
           :html-doctype "html5"
           :with-toc nil
           )
          ("blog-posts"
           :base-directory "~/git/cerealbuster.gitlab.io/org/"
           :base-extension "org"
           :publishing-directory "~/git/cerealbuster.gitlab.io/"
           :publishing-function org-html-publish-to-html
           :recursive t
           :headline-levels 4
           :section-numbers nil
           :auto-preamble t
           :auto-sitemap t
           :exclude "index.org\\|about.org"
           :sitemap-filename "sitemap.org"
           :sitemap-title "sitemap"
           :sitemap-style list
           :sitemap-sort-files anti-chronologically
           :sitemap-format-entry my/sitemap-entry
           :html-link-home "../../index.html"
           :html-link-up "../../index.html"
           :html-doctype "html5"
           :with-toc nil)
          ("org-static"
           :base-directory "~/git/cerealbuster.gitlab.io/"
           :publishing-directory "~/git/cerealbuster.gitlab.io/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :recursive t
           :publishing-function org-publish-attachment)
          ("org" :components ("blog-posts" "static-sites" "org-static"))))
#+END_SRC

** ob-hy
#+BEGIN_SRC emacs-lisp
  (use-package ob-hy
    :ensure t)
#+END_SRC

** org-babel
This languages shoud be loaded when creating code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (lisp . t)
   (clojure . t)
   (hy . t)
   (scheme . t)
   (R . t)
   (ein .t )
   (shell . t)
   (gnuplot . t)))
(setq org-babel-clojure-backend 'cider)
(setq org-babel-python-command "python3")
#+END_SRC

** org-babel-eval-in-repl

Sometimes its nice to just evaluate the codeblock in the repl

#+BEGIN_SRC emacs-lisp
(use-package org-babel-eval-in-repl
  :ensure t
  :after ob
  :config
  (define-key org-mode-map (kbd "C-<return>") 'ober-eval-in-repl)
  (define-key org-mode-map (kbd "M-S-<return>") 'ober-eval-block-in-repl))
#+END_SRC

** hooks for orgmode
Update dynamic blocks before saving

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'org-update-all-dblocks)
#+END_SRC

* Golden Ratio

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :init (setq golden-ratio-auto-scale t)
  :config (golden-ratio-mode 1))
#+END_SRC
* Ledger Mode
  Lets try ledger mode
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t)
#+END_SRC

* Writegood Mode

#+begin_src emacs-lisp
(use-package writegood-mode
  :ensure t
  :config
  (global-set-key (kbd "C-c g") 'writegood-mode)
  (global-set-key (kbd "C-c C-g g") 'writegood-grade-level)
  (global-set-key (kbd "C-c C-g e") 'writegood-reading-ease))
#+end_src
* Centered window mode
#+begin_src emacs-lisp
(use-package centered-window
  :ensure t)
#+end_src

* Skeletons

#+begin_src emacs-lisp

(define-skeleton new-publication
  "Inserts a pubication skeletion into the current buffer
The buffer should be emtpy"
  nil
  "#+options: ':nil *:t -:t ::t <:t H:3 \\n:nil ^:t arch:headline\n"
  "#+options: author:nil broken-links:nil c:nil creator:nil\n"
  "#+options: d:(not LOGBOOK) date:t e:t email:nil f:t inline:t num:t\n"
  "#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t\n"
  "#+options: timestamp:t title:nil toc:nil todo:t |:t\n"
  "#+title: " (file-name-base buffer-file-name) "\n"
  "#+latex_class: acmart\n"
  "#+latex_class_options: [11pt,nonacm,screen,acmsmall,urlbreakonhyphens,review=true,anonymous=false]\n"
  "#+latex_header: \\usepackage{natbib}\n"
  "#+latex_header: \\author{Raffael Affolter}\n"
  "#+latex_header: \\email{raffael.affolter@virtopsy.com}\n"
  "#+latex_header:\\affiliation{ \\institution{University of Zurich}\\department{Institute of Forensic Medicine}\\streetaddress{Winterthurerstrasse 190/52}\\city{Zurich} \\country{Switzerland} \\postcode{CH-8057}}\n"
  "#+latex_header_extra:\n"
  "#+description:\n"
  "#+keywords:\n"
  "#+subtitle:\n"
  "#+latex_compiler: pdflatex\n"
  "#+date: \\today\n"
  "\\setcopyright{none}\n"
  "#+begin_abstract\n"
  "1. General statement introducing broad research area of the particular topic\n"
  "2. Explanation of the specific problem (difficulties, obstacles challenge) to be solved\n"
  "3. Review of existing or standard solutions to this problem and their limitations\n"
  "4. An outline of the proposed new solution\n"
  "5. A summary of how the solution was evaluated and what the outcomes of the evaluation where\n"
  "#+end_abstract\n"
  "\\maketitle\n"
  "* Introduction\n"
  "1. why is the problem interesting?\n"
  "2. what are the relevant issues?\n"
  "3. why is the taken apporoach good?\n"
  "4. why are the outcomes significant?\n"
  "* Methodology\n\n"
  "* Results\n\n"
  "* Discussion\n\n"
  "* Conclusions\n\n"
  "Draw together the topics discussed and look beyond\n"
  "#+begin_acks\n\n"
  "Acknowledgements\n"
  "#+end_acks\n\n"
  "bibliographystyle:ACM-Reference-Format\n"
  "bibliography:"(car my-default-bibfile)"\n"

  )
#+end_src
